{"version":3,"sources":["Components/Break.js","Components/Session.js","Components/Time.js","Components/Instructions.js","Components/App.js","index.js"],"names":["Break","props","className","onClick","break","increaseBreak","decreaseBreak","Session","session","increaseSession","decreaseSession","Time","state","isSession","timerSecond","intervalId","playTimer","bind","decreaseTimer","stopTimer","resetTimer","setInterval","this","setState","timerLength","toggleInterval","updateTimerMinute","prevState","clearInterval","id","time","Component","Instructions","App","breakLength","sessionLength","isPlay","onIncreaseBreak","onDecreaseBreak","onIncreaseSession","onDecreaseSession","onUpdateTimerMinute","onResetTimer","timeMinute","timerMinute","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d80d094.chunk.js","sourcesContent":["import React from 'react'\n\n// onClick methods will uplift the state \n// will be called in app.js\n\n\nfunction Break (props) {\n        function decreaseCounter () {\n            //cant decrease lower than 1\n            if (props.break === 1) {\n                return\n            }\n            props.decreaseBreak();\n        }\n        function increaseCounter () {\n             if (props.break === 3) {\n                 return\n             }\n             props.increaseBreak();\n        }\n        \n\n    return (\n        <section className=\"userInterface\">\n        <div> <hr></hr>\n            <h4>How many breaks do you need?</h4>\n         {/* <section> */}\n             <button onClick = {increaseCounter}>Up</button>\n             <p>{props.break}</p>\n            <button onClick = {decreaseCounter}>Down</button>\n\n\n         {/* </section> */}\n        </div>\n      </section>  \n    )\n}\n\nexport default Break\n\n","import React from 'react'\n\nexport default function Session(props) {\n\n    function decreaseSession () {\n        if (props.session === 1) {\n            return\n        }\n\n        props.decreaseSession();\n     \n    }\n\n\n    function increaseSession () {\n        if (props.session === 27 ) {\n            return\n        }\n        props.increaseSession();\n    }\n\n\n\n    return (\n        <div>\n           <section className=\"userInterface\">\n            <h4>How long do you want to focus for?</h4>\n           \n             <button onClick = {increaseSession}>Heavy</button>\n             <p className=\"propsStyle\">{props.session}:minutes</p>  \n            <button onClick = {decreaseSession}>Light</button>\n          </section> \n        </div>\n    )\n}\n","import React, { Component } from 'react'\n\nexport default class Time extends Component {\n    constructor () {\n        super ()\n        this.state = {\n            isSession: true,\n            timerSecond: 0,\n            intervalId: ''\n        }\n        this.playTimer = this.playTimer.bind(this)\n        this.decreaseTimer = this.decreaseTimer.bind(this)\n        this.stopTimer = this.stopTimer.bind(this)\n        this.resetTimer = this.resetTimer.bind(this)\n    }\n\n    playTimer() {\n        //start timer\n        //update every second\n        //calls decrease timer \n        let intervalId = setInterval (this.decreaseTimer, 1000)\n        this.setState ({\n            intervalId : intervalId\n        })\n     }\n\n     decreaseTimer () {\n        switch (this.state.timerSecond) {\n            case 0:\n            if (this.props.timerLength === 0) {\n                if (this.state.isSession) {\n                    this.setState({\n                        isSession : false\n                    })\n                    this.props.toggleInterval(this.state.isSession)\n                } else {\n                    this.setState({\n                        isSession : true\n                    });\n                    this.props.toggleInterval\n                    (this.state.isSession)\n\n                }\n            }\n            //reduce timer 1 by one if seconds are zero\n            this.props.updateTimerMinute ()\n            this.setState ({\n                timerSecond: 59\n             })\n            break; \n\n          default:\n              this.setState ((prevState) => {\n                  return {\n                      timerSecond: prevState.timerSecond -1\n                  }\n              })\n            \n        }\n    }\n\n    stopTimer () {\n        clearInterval(this.state.intervalId)\n    }\n\n    resetTimer () {\n        clearInterval(this.state.intervalId)\n        this.props.resetTimer();\n        this.setState({\n            timerSecond: 0\n        })\n\n\n    }\n\n\n    render() {\n        return (\n            <section>\n                {/* conditional session timer, if the timer is in session, display session time otherwise display break session */}\n                <section id=\"session-container\">\n                    <h4>{this.state.isSession === true? \"Session\" : \"Break\"}</h4>\n                    <span>{this.props.time}</span>\n                    <span>:</span>\n                    <span>{this.state.timerSecond === 0 \n                        ? \"00\" \n                        : this.state.timerSecond < 10 \n                        ? \"0\" + this.state.timerSecond \n                        : this.state.timerSecond}\n                     </span>\n                </section>\n                        <section className=\"actions-container\">\n                        <button onClick = {this.playTimer}>Play</button>\n                        <button onClick = {this.stopTimer}>Stop</button>\n                        <button onClick = {this.resetTimer}>Reset</button>\n                        \n                        </section>\n            </section>\n        )  \n    }\n}\n\n","import React from 'react'\nimport ComponentStyle from \"../ComponentStyle/index.css\"\n\nexport default function Instructions() {\n    return (\n        <div className= \"instructions\">\n            <h1>What is the Pomodoro Technique?</h1>\n            <p>The Pomodoro Technique is a time management method developed by Francesco Cirillo in the late 1980s. The technique uses a timer to break down work into intervals, traditionally 25 minutes in length, separated by short breaks.</p>\n            <h3> How to get started</h3>\n            <p> (1) Choose a task to be accomplished</p>\n            <p> (2) Set the Pomodoro to 25 minutes (the Pomodoro is the timer)</p>\n            <p> (3) Work on the task until the Pomodoro rings, then put a check on your sheet of paper </p>\n            <p> (4) Take a short break (5 minutes is OK)</p>\n            <p> (5) Every 4 Pomodoros take a longer break.</p>\n            </div>\n    )\n}\n","import React from 'react';\nimport Break from \"./Break.js\"\nimport Session from \"./Session.js\"\nimport Time from \"./Time.js\"\nimport './App.css'\nimport Instructions from './Instructions.js';\n\n\n\nclass App extends React.Component {\n\n  constructor () {\n    super () \n\n    this.state = {\n      breakLength : 5,\n      sessionLength : 25,\n      timerLength : 25,\n      isPlay: false\n    }\n    this.onIncreaseBreak = this.onIncreaseBreak.bind(this)\n    this.onDecreaseBreak = this.onDecreaseBreak.bind(this)\n\n    this.onIncreaseSession = this.onIncreaseSession.bind(this)\n    this.onDecreaseSession = this.onDecreaseSession.bind(this)\n    this.toggleInterval = this.toggleInterval.bind(this)\n    this.onUpdateTimerMinute = this.onUpdateTimerMinute.bind(this)\n    this.onResetTimer = this.onResetTimer.bind(this)\n \n  }\n\n  //functions that will increase or decrease break counter\n\n  onIncreaseBreak () {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength + 1\n      }\n    })\n  }\n\n  onDecreaseBreak () {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength - 1\n      }\n    })\n  }\n\n  //functions that will increase or decrease session counter and change the state\n   onIncreaseSession () {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength + 1,\n        timerLength : prevState.sessionLength + 1\n      }\n    })\n  }\n\n  onDecreaseSession () {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength - 1,\n        timerLength : prevState.sessionLength - 1\n      }\n    })\n  }\n\n  // update the timer \n    onUpdateTimerMinute () {\n     this.setState((prevState) => {\n       return {\n        timerLength: prevState.timerLength - 1\n       }\n     })\n   }\n\n   toggleInterval (isSession) {\n     if(isSession) {\n      this.setState ({\n        timeMinute: this.state.sessionLength\n       })\n      } \n     else {\n       this.setState ({\n         timerMinute : this.state.breakLength,\n         breakLength : this.state.breakLength\n\n       })\n     }\n   }\n\n   onResetTimer () {\n     this.setState({\n       timerMinute: this.state.sessionLength\n     })\n   }\n\n\n  render() {\n    return ( \n        <div>\n        <h2>Get Things Done Clock</h2>\n        <h1>By FJK</h1>\n        <hr></hr>\n        <Session \n        isPlay={this.state.isPlay}\n        session = {this.state.sessionLength}\n         increaseSession = {this.onIncreaseSession}\n         decreaseSession = {this.onDecreaseSession}\n        />\n        <Break \n          break= {this.state.breakLength} \n          increaseBreak = {this.onIncreaseBreak} \n          decreaseBreak = {this.onDecreaseBreak} \n          />\n        <Time \n          time = {this.state.timerLength}\n          // if the timer has stopped, break timer will be running \n          breakLength = {this.state.breakLength}\n          updateTimerMinute = {this.onUpdateTimerMinute}\n          toggleInterval = {this.toggleInterval}\n          resetTimer = {this.onResetTimer}\n        />\n        <Instructions/>\n        </div>\n    )\n  }\n}\n\nexport default App ","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './Components/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}